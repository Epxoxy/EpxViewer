<Window x:Class="EpxViewer.FloatEllipse"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:lb="clr-namespace:EpxViewer.ListBox"
        xmlns:ext="clr-namespace:EpxViewer.Extension"
        xmlns:local="clr-namespace:EpxViewer"
        mc:Ignorable="d" WindowStyle="None"
        Topmost="True" ResizeMode="NoResize"
        Background="{x:Null}" Height="0" Width="0"
        AllowsTransparency="True"
        Title="FloatEllipse" Style="{DynamicResource EllipseWindowStyle}">
    <Window.Resources>
        <local:Bool2Visibility x:Key="bool2Visible" />
        <local:Bool2NotBool x:Key="bool2notbool" />

        <Color x:Key="Hover_d99903" A="255" R="217" G="153" B="3" />
        <Color x:Key="Press_e6a710" A="255" R="230" G="167" B="16" />
        <Color x:Key="Static_52575c" A="255" R="82" G="87" B="92" />
        <Color x:Key="Stroke.Color" A="10" R="10" G="10" B="10" />
        <Color x:Key="Canvas.Color" A="100" R="10" G="10" B="10" />
        <Color x:Key="Tranparent.Color" A="0" R="0" G="0" B="0" />
        <SolidColorBrush x:Key="Stroke.Fill" Color="{StaticResource Stroke.Color}" />
        <SolidColorBrush x:Key="Static.Ellipse.Fill" Color="{StaticResource Static_52575c}" />

        <RadialGradientBrush x:Key="RGBWhiteToGray" GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
            <RadialGradientBrush.GradientStops>
                <GradientStop Color="White" Offset="0"/>
                <GradientStop Color="White" Offset="0.8"/>
                <GradientStop Color="Transparent" Offset="0.9"/>
            </RadialGradientBrush.GradientStops>
        </RadialGradientBrush>
        <Style x:Key="ImageButton" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="26" />
            <Setter Property="Width" Value="26" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border RenderTransformOrigin="0.5, 0.5" CornerRadius="20"
                                UseLayoutRounding="True"  Background="{StaticResource RGBWhiteToGray}">
                            <Border.RenderTransform>
                                <RotateTransform Angle="0"/>
                            </Border.RenderTransform>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" To="0"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="45"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-45"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed" >
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" To="0"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ImageToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Height" Value="26" />
            <Setter Property="Width" Value="26" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border RenderTransformOrigin="0.5, 0.5" CornerRadius="20"
                                UseLayoutRounding="True" Background="{StaticResource RGBWhiteToGray}">
                            <Border.RenderTransform>
                                <RotateTransform Angle="0" />
                            </Border.RenderTransform>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" To="0"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="45"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-45"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed" >
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" To="0"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="EllipseButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="BorderBrush" Value="{StaticResource Static.Ellipse.Fill}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Background" Value="{x:Null}" />
            <Setter Property="Width" Value="36" />
            <Setter Property="Height" Value="36" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="3" CornerRadius="20">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                    Storyboard.TargetName="ellipse"
                                                                    To="{StaticResource Static_52575c}" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)"
                                                                    To="{StaticResource Static_52575c}" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                    Storyboard.TargetName="ellipse"
                                                                    To="{StaticResource Hover_d99903}" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)"
                                                                    To="{StaticResource Hover_d99903}" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed" >
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                    Storyboard.TargetName="ellipse"
                                                                    To="{StaticResource Press_e6a710}" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)"
                                                                    To="{StaticResource Press_e6a710}" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid>
                                <Ellipse x:Name="ellipse" Fill="{StaticResource Static.Ellipse.Fill}" 
                                         Stroke="{StaticResource Stroke.Fill}" StrokeThickness="4"
                                         Height="30" Width="30"/>
                                <ContentPresenter />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#region Recycling-->
        
        <Style x:Key="EllipseWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                CornerRadius="36">
                            <AdornerDecorator>
                                <ContentPresenter/>
                            </AdornerDecorator>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->
    </Window.Resources>
    <Canvas x:Name="canvas">
        <!--<Popup StaysOpen="False" IsOpen="False" AllowsTransparency="True" Placement="Center" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=button}">
            <local:MessagePane />
        </Popup>-->
        <!--<Popup x:Name="monitorPopup" StaysOpen="True" IsOpen="True" AllowsTransparency="True" Placement="Center" PlacementTarget="{Binding ElementName=canvas}">
            <local:MonitorPane x:Name="monitor" local:ExtPopup.Draggable="True"/>
        </Popup>-->
        <Popup x:Name="monitor2Popup" StaysOpen="True" AllowsTransparency="True" Placement="Center" PlacementTarget="{Binding ElementName=canvas}">
            <Popup.ContextMenu>
                <ContextMenu >
                    <MenuItem Header="Start" IsCheckable="True" Unchecked="OnStartMonitorChanged" Checked="OnStartMonitorChanged" BorderThickness="0"/>
                    <MenuItem Header="remove" Click="RemoveItemClick" BorderThickness="0"/>
                    <MenuItem Header="OnTop" IsCheckable="True" Unchecked="OnSetTopChanged" Checked="OnSetTopChanged" BorderThickness="0"/>
                    <MenuItem Header="Lock" IsCheckable="True" Unchecked="OnLockChanged" Checked="OnLockChanged" BorderThickness="0"/>
                </ContextMenu>
            </Popup.ContextMenu>
            <local:MonitorPane2 x:Name="monitor2" local:ExtPopup.Draggable="True">
            </local:MonitorPane2>
        </Popup>
        <Popup x:Name="ellipsePopup" StaysOpen="True" AllowsTransparency="True" Placement="Left" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=canvas}">
            <Canvas Width="36" Height="36">
                <Button x:Name="button" PreviewMouseLeftButtonDown="onPreMouseLButtonDown"
                        PreviewMouseLeftButtonUp="onPreMouseLButtonUp" PreviewMouseRightButtonUp="onPreMouseRButtonUp"
                        PreviewMouseMove="onPreMouseMove" IsEnabled="{Binding IsOpen, ElementName=rightMenuPopup, Converter={StaticResource bool2notbool}}"
                        Style="{StaticResource EllipseButtonStyle}">
                </Button>
                <Popup x:Name="rightMenuPopup" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Fade"
                        Placement="Right" HorizontalOffset="4" VerticalOffset="-24" PlacementTarget="{Binding ElementName=button}">
                    <ItemsControl Height="78" Width="26"
                                  ext:ItemsControlExt.IsInView="{Binding IsOpen, ElementName=rightMenuPopup}"
                                  ext:ItemsControlExt.ApplyControl="{Binding RelativeSource={RelativeSource Self}}">
                        <Button x:Name="shutbtn" Style="{StaticResource ImageButton}" Click="shutdownClick">
                            <Image Height="26" Width="26" Source="../Images/btnicon/shut-down_normal.png" />
                        </Button>
                        <Button x:Name="notebtn" Style="{StaticResource ImageButton}" Click="notebtnClick">
                            <Image Height="26" Width="26" Source="../Images/btnicon/note1_normal.png" />
                        </Button>
                        <ToggleButton x:Name="removebtn" Style="{StaticResource ImageToggleButton}" IsChecked="{Binding IsOpen, ElementName=rightMenuPopup,Mode=TwoWay}">
                            <Image Height="26" Width="26" Source="../Images/btnicon/remove_normal.png" />
                        </ToggleButton>
                    </ItemsControl>
                </Popup>
                <Popup x:Name="menuPanPopup" StaysOpen="True" IsOpen="False" AllowsTransparency="True" VerticalOffset="-190" HorizontalOffset="236" Placement="Left" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=button}">
                    <local:MenuPan Grid.Column="1" x:Name="menuPan" />
                </Popup>
            </Canvas>
        </Popup>
    </Canvas>
</Window>
